#!/usr/bin/env ruby

require 'thor'
require 'csv'
require_relative '../lib/ds/cli'

class ReconCLI < DS::CLI

  def self.exit_on_failure?
    true
  end

  RECON_SETS = Settings.recon.sets.map { |set| set[:name] }.freeze
  # We don't validate the aggregate subjects, named subjects set

  class_option :directory, banner: 'PATH', desc: "Output directory [ignored by recon-update, validate]", aliases: '-o', default: '.'
  class_option :'source-type',
               banner: 'TYPE',
               desc: "One of #{DS::VALID_SOURCE_TYPES.join(', ')}; REQUIRED except for recon-update, validate",
               enum: DS::VALID_SOURCE_TYPES,
               aliases: '-t',
               required: (ARGV.size > 0 && ! %w{recon-update validate}.include?(ARGV[0]))
  class_option :verbose, desc: "Print full error messages", aliases: '-v', type: :boolean, default: false

  desc "validate [RECON_CSV]", "Validate RECON CSV structure and data"
  long_desc <<~LONGDESC
    Validate the recon CSV using set configuration 'config/recon.yml'

    -t/-source-type option is NOT REQUIRED

    ds-recon -s names path/to/names.csv
  LONGDESC
  option :'recon-set', banner: 'SET', desc: "One of #{Recon::RECON_VALIDATION_SETS.join ', '}; REQUIRED", aliases: '-s', required: true
  def validate *files
    set_name = options[:'recon-set']
    recon_csvs = files.present? ? files : Recon.csv_files(set_name.to_sym)
    errors = recon_csvs.flat_map { |csv| Recon.validate set_name, csv }.compact

    if errors.empty?
      puts "SUCCESS no errors found for: #{recon_csvs.join ', '}"
    else
      puts "ERRORS validating #{recon_csvs.join ', '}:#{$/}#{$/}#{errors.join $/}" unless errors.empty?
    end

    true
  end


  desc "names FILES", "Extract names from one or more FILEs and write to CSV"
  long_desc <<-LONGDESC
    Extract names from one or more FILEs.

    Use '-' to read a list of files from standard input:

      cat list_of_files | recon names -t mets -
  LONGDESC
  def names *files
    # TODO: Add role column to names
    return false unless validate_args files

    out_csv = write_csv_for :names, files
    puts "Wrote: #{out_csv}"

    true
  end

  desc "places FILES", "Extract place names from one or more FILEs and write to CSV"
  long_desc <<-LONGDESC
    Extract place names from one or more FILEs.

    Use '-' to read a list of files from standard input:

      cat list_of_files | recon places -t mets -
  LONGDESC
  def places *files
    return false unless validate_args files
    invoke :recon_update

    out_csv = write_csv_for :places, files
    puts "Wrote: #{out_csv}"

    true
  end

  desc "subjects FILES", "Extract subjects from one or more FILEs and write to CSV"
  long_desc <<-LONGDESC
  Extract LC subjects from one or more FILEs.

  Use '-' to read a list of files from standard input:

      cat list_of_files | recon subjects -t marc -

  By default MARC fields 650, 651 are extracted, but fields 600, 610 are extracted if `--named-subjects` is given.

  NOTE: Not implemented for mets or tei source types.

LONGDESC
  option :'named-subjects', desc: 'Extract named subjects', aliases: '-n', type: :boolean, default: false
  def subjects *files

    return false unless validate_args files
    invoke :recon_update

    out_csv = write_csv_for :subjects, files
    puts "Wrote: #{out_csv}"

    true
  end

  desc "genres FILES", "Extract genre terms from one or more FILEs and write to CSV"
  long_desc <<-LONGDESC
  Extract genre terms from one or more FILEs.

  Use '-' to read a list of files from standard input:

      cat list_of_files | recon genres -t marc -

  NOTE: Not implemented for mets or tei source types.

  LONGDESC
  def genres *files
    return false unless validate_args files
    invoke :recon_update

    out_csv = write_csv_for :genres, files
    puts "Wrote: #{out_csv}"

    true
  end

  desc "materials FILES", "Extract materials terms from one or more FILEs and write to CSV"
  long_desc <<-LONGDESC
  Extract materials terms from one or more FILEs.

  Use '-' to read a list of files from standard input:

      cat list_of_files | recon materials -t mets -
  LONGDESC
  def materials *files
    return false unless validate_args files
    invoke :recon_update

    out_csv = write_csv_for :materials, files
    puts "Wrote: #{out_csv}"

    true
  end

  desc "languages FILES", "Extract languages from one or more FILEs and write to CSV"
  long_desc <<-LONGDESC
  Extract languages from one or more files.

  Use '-' to read a list of files from standard input:

      cat list_of_files | recon languages -t mets -
  LONGDESC
  def languages *files
    return false unless validate_args files
    invoke :recon_update

    out_csv = write_csv_for :languages, files
    puts "Wrote: #{out_csv}"

    true
  end

  desc "titles FILES", "Extract titles from one or more FILEs and write to CSV"
  long_desc <<-LONGDESC
  Extract titles from one or more files.

  Use '-' to read a list of files from standard input:

      cat list_of_files | recon titles -t mets -
  LONGDESC
  def titles *files
    return false unless validate_args files
    invoke :recon_update

    out_csv = write_csv_for :titles, files
    puts "Wrote: #{out_csv}"

    true
  end

  desc 'write-all FILES', 'Extract recons and write to CSV for all recon types'
  def write_all *files
    return false unless validate_args files
    invoke :recon_update

    recon_manager = build_recon_manager files
    Recon::RECON_TYPES.each do |recon_type|
      out_csv = recon_manager.write_csv recon_type
      puts "Wrote: #{out_csv}"
    end
    true
  end

  desc "splits FILES", "Extract long lines"
  long_desc <<-LONGDESC
  Extract strings longer than 400 characters

  Use '-' to read a list of files from standard input:

      cat list_of_files | recon splits -t mets -
  LONGDESC
  def splits *files
    return false unless validate_args files

    out_csv = out_file 'splits', options
    begin
      invoke :recon_update

      case options[:'source-type']
      when 'marc'
        data = Splits.from_marc select_input files
      when 'mets'
        data = Splits.from_mets select_input files
      when 'tei'
        data = Splits.from_tei select_input files
      else
        raise NotImplementedError, "No method to process splits for source type: '#{options[:source_type]}'"
      end

      validate! data unless options[:skip_validation]
      write_csv out_csv, Splits::CSV_HEADERS, data

    rescue NotImplementedError, StandardError
      STDERR.puts $!.backtrace if options[:verbose]
      abort "#{$!}"
    end

    true
  end

  protected

  # Extract recon values from files for given recon type, and write to CSV.
  #
  # @param recon_type_name [String] the name of the recon type
  # @param files [Array<String>] the list of files to process
  # @return [String] the path of the output CSV file
  def write_csv_for recon_type_name, files
    build_recon_manager = build_recon_manager files
    recon_type = Recon.find_recon_type recon_type_name
    out_file = build_recon_manager.write_csv recon_type
    out_file
  end

  # Builds a ReconManager object with the given files.
  #
  # @param files [Array<String>] the list of files to process
  # @return [Recon::ReconManager] the ReconManager object
  def build_recon_manager files
    Recon::ReconManager.new(
      source_type: options[:'source-type'],
      out_dir: options[:directory],
      files: files
    )
  end

  # Ensures that the list of files is not empty and that they exist.
  #
  # @param files [Array<String>] the list of files to validate
  # @return [Boolean] true if the arguments are valid, false otherwise
  def validate_args files
    return true if read_from_stdin? files
    cannot_find = files.reject { |f| File.exist?(f) }
    return true if cannot_find.empty?

    puts "Can't find input file(s): #{cannot_find.join '; ' }"
    false
  end
end

ReconCLI.start ARGV
